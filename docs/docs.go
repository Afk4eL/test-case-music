// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
    "/get-songs": {
      "get": {
        "tags": [
          "songs"
        ],
        "summary": "Get songs",
        "description": "Retrieve the list of all songs with pagination and filtering",
        "operationId": "getSongs",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of songs per page",
            "required": false,
            "type": "integer"
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter by group",
            "required": false,
            "type": "string"
          },
          {
            "name": "song",
            "in": "query",
            "description": "Filter by song name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Song"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Song doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/get-song-text": {
      "get": {
        "tags": [
          "songs"
        ],
        "summary": "Get song text",
        "description": "Retrieve the text of a song by its ID with pagination",
        "operationId": "getSongText",
        "parameters": [
          {
            "name": "songId",
            "in": "query",
            "description": "Song ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "type": "integer"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of couplets per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Song doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/delete-song": {
      "delete": {
        "tags": [
          "songs"
        ],
        "summary": "Delete a song",
        "description": "Delete a song by its ID",
        "operationId": "deleteSong",
        "parameters": [
          {
            "name": "songId",
            "in": "query",
            "description": "Song ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Song deleted",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Song doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/update-song": {
      "post": {
        "tags": [
          "songs"
        ],
        "summary": "Update a song",
        "description": "Update an existing song by providing updated details",
        "operationId": "updateSong",
        "parameters": [
          {
            "name": "song",
            "in": "body",
            "description": "Updated song object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Song"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Song updated",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Song doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/add-song": {
      "post": {
        "tags": [
          "songs"
        ],
        "summary": "Add a new song",
        "description": "Add a new song with details fetched from an external API",
        "operationId": "addSong",
        "parameters": [
          {
            "name": "song",
            "in": "body",
            "description": "New song object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Song"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Song created",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Song": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "group": {
          "type": "string"
        },
        "song": {
          "type": "string"
        },
        "releaseDate": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "link": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "OK": {
          "type": "string"
        }
      }
    }
  }
	}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Song Library API",
	Description:      "This is an API for managing songs in a library.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
